#include <xc.h>
#include <stdint.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <avr/io.h>

#define IOCONB 0x0b
#define GPPUB 0x0d
#define GPINTENB 0x05
#define IPOLB 0x03
#define INTCAPB 0x11
const int Debounce=10;
volatile long    CurrentMs = 0;     // setting time in milliseconds 
volatile long    CurrentTime = 0; // overflow of cur_ms
volatile long    LastInterrupt=0; 
volatile int FlagT0 = 0;

void EnterSleep(){
    set_sleep_mode(SLEEP_MODE_IDLE); //setting sleep mode
    sleep_enable(); //setting the global sleep flag
                sleep_cpu();
                sleep_disable();//deleting the global sleep flag

}

void ExternalInterruptSetup() {
    //turn off interrupt 
    cli();
    //button interrupt on pin 2
    EICRA |= (1 << ISC00);
    // set INT0 to trigger on the logic change of INTO
    //Interrupt 0 Sense Control table
    EIMSK |= (1 << INT0); // Turns interrupt on INT0 (T0 pin)
    sei(); //turn on interrupt
}
void TimerSetup1Ms(){
    cli();
    TCCR2B = 0; // Turn off clock whilst configuring
    TCCR2B = 0b00000100; // cs22-21-20 (start counter) prescale /64
    //16MHz/(64*250)=1KHz
    TCNT2 = 0;
    OCR2A = 249; // value to match (0 - 249) = 250 ticks
    TIFR2 = 0xff; // clear all existing flags
    TIMSK2 = _BV(OCIE2A); // enable interrupt on CTC match
    TCCR2A = 0b00000010; // WGM01 = 1, WGM00 = 0 mode 2 CTC
    sei(); //turn on interrupt
}
ISR(TIMER2_COMPA_vect) {
    // Timer 0 has reached CTC top, 1ms has passed.
    CurrentMs++;
    if (CurrentMs == 0) {
        CurrentTime++;
    }
}

ISR(INT0_vect) {   
    if((CurrentMs-LastInterrupt)>Debounce) //ignore bouncing button
            FlagT0++; // setting flag on every change of INT0
    SPI_Read_Command(INTCAPB); //reading interrupt to clear it
    LastInterrupt=CurrentMs;
}


void delay_ms(long num) {
  long EndTime= num+CurrentMs;
  while (EndTime<CurrentMs)
      EnterSleep();
}

int8_t SPI_transfer(int8_t data) {

    SPDR = data;
    while ((SPSR & _BV(SPIF)) == 0) {
        ; // wait until transfer completed
    }
    return SPDR;
}

void SPI_Send_Command(uint8_t reg, uint8_t data) {
    // Send a command + byte to SPI interface
    PORTB &= ~_BV(2); // SS enabled (low))
    SPI_transfer(0x40);
    SPI_transfer(reg);
    SPI_transfer(data);
    PORTB |= _BV(2); // SS disabled (high)
}

uint8_t SPI_Read_Command(uint8_t reg) {
    uint8_t data;
    // Read a command output from SPI interface
    PORTB &= ~_BV(2); // SS enabled (low))
    SPI_transfer(0x41);
    SPI_transfer(reg);
    data = SPI_transfer(0);
    PORTB |= _BV(2); // SS disabled (high)
    return data;
}

void setup_SPI() {
    DDRB = 0b00101111;
    PORTB |= 0b00000100; // set SS signal high
    /*
     * Setup SPI operations
     * Reading pages 176-177 of the data sheet
     */
    SPCR = _BV(SPE) | _BV(MSTR); // setting master SPI, SPI mode 0 operation
    SPSR = 0; // clearing interrupt flags and oscillator mode.

    SPI_Send_Command(IOCONB, 0b01100000); // mirror interrupts, use sequential mode    
    SPI_Send_Command(0x00, 0x00); // register IODIRA (port A data direction)
    SPI_Send_Command(0x01, 0xf0); // register IODIRB (port B data direction)
    SPI_Send_Command(GPPUB, 0xff); // register GPPUB (port B GPIO Pullups)
    SPI_Send_Command(IPOLB, 0xf0); //inverse polarity
    SPI_Send_Command(GPINTENB, 0x80); // Enable GPINTEN ? INTERRUPT-ON-CHANGE PINS on bit 7 portB

}

void write_LEDs(int leds) {
    int PortA = leds & 0xff; //first LED is on bit 4
    SPI_Send_Command(0x14, PortA); //send value to 0x14(port A address)
}

int main(void) {
    ExternalInterruptSetup();
    setup_SPI(); // set up the physical hardware
    int sensorlight = 0;
    while(1){
    write_LEDs(0b10000001) ; // Green 1 and Red 2 turn on
    delay_ms(7000);
    while (sensorlight == 0){
        int temp=SPI_Read_Command(0x13)>>6; //2 bits - 2 switches
        sensorlight= (temp & 0x01)+(temp>>1); 
    }
    write_LEDs(0b10000010);//Yellow 1 and Red 2 turn on
    delay_ms(1000);
    write_LEDs(0b00100100);// Red 1 and Green 2 turn on
    delay_ms (4000);
    while (sensorlight == 2){
        int temp=SPI_Read_Command(0x13)>>6; //2 bits - 2 switches
        sensorlight= (temp & 0x01)+(temp>>1); 
    }
    write_LEDs(0b01000100);
    delay_ms(1000);
    
    
    }
